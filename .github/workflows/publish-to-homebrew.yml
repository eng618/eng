name: Publish to Homebrew

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install & Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Persist dist directory
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download dist directory
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Get Checksums
        id: get_checksums
        run: |
          cd dist
          echo "checksums<<EOF" >> $GITHUB_OUTPUT
          # Extract checksums using the actual filenames from artifacts.json
          # Keys will be like 'eng_0.17.4_Darwin_x86_64.tar.gz'
          jq -r 'reduce ( .[] | select(.type == "Archive") | select(.name | test("Darwin|Linux")) | {(.name): (.extra.Checksum | split(":")[1])} ) as $item ({}; . + $item)' artifacts.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          cd ..

      # --- New Step to Calculate Version without 'v' ---
      - name: Get Version without v prefix
        id: get_version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # Use bash parameter expansion to remove 'v' prefix if it exists
          VERSION_NO_V="${TAG_NAME#v}"
          echo "version_no_v=${VERSION_NO_V}" >> $GITHUB_OUTPUT

      - name: Publish to Homebrew
        env:
          PROJECT_NAME: "eng"
          # TAG_NAME still includes the 'v' (e.g., v0.17.4) - used for URL path
          TAG_NAME: ${{ github.ref_name }}
          # Construct filenames using the output from the previous step
          DARWIN_AMD64_FILE: eng_${{ steps.get_version.outputs.version_no_v }}_Darwin_x86_64.tar.gz
          DARWIN_ARM64_FILE: eng_${{ steps.get_version.outputs.version_no_v }}_Darwin_arm64.tar.gz
          LINUX_AMD64_FILE: eng_${{ steps.get_version.outputs.version_no_v }}_Linux_x86_64.tar.gz
          LINUX_ARM64_FILE: eng_${{ steps.get_version.outputs.version_no_v }}_Linux_arm64.tar.gz
        run: |
          # Change directory into the downloaded dist directory
          cd dist

          git clone https://github.com/eng618/homebrew-eng.git
          cd homebrew-eng/Formula

          echo "class Eng < Formula" > eng.rb
          echo "  desc 'Personal cli to help facilitate my normal workflow'" >> eng.rb
          echo "  homepage 'https://github.com/eng618/eng'" >> eng.rb
          echo "  # URLs now use TAG_NAME (with v) for path, and FILE variable (without v) for filename" >> eng.rb
          echo "  case" >> eng.rb
          echo "  when OS.mac? && Hardware::CPU.intel?" >> eng.rb
          # URL Path uses TAG_NAME (e.g., v0.17.4), Filename uses DARWIN_AMD64_FILE (e.g., eng_0.17.4...)
          echo "    url 'https://github.com/eng618/eng/releases/download/${TAG_NAME}/${DARWIN_AMD64_FILE}'" >> eng.rb
          # Checksum lookup uses the filename variable (without 'v')
          echo "    sha256 '${{ fromJson(steps.get_checksums.outputs.checksums)[env.DARWIN_AMD64_FILE] }}'" >> eng.rb
          echo "  when OS.mac? && Hardware::CPU.arm?" >> eng.rb
          echo "    url 'https://github.com/eng618/eng/releases/download/${TAG_NAME}/${DARWIN_ARM64_FILE}'" >> eng.rb
          echo "    sha256 '${{ fromJson(steps.get_checksums.outputs.checksums)[env.DARWIN_ARM64_FILE] }}'" >> eng.rb
          echo "  when OS.linux?" >> eng.rb
          echo "    if Hardware::CPU.intel?" >> eng.rb
          echo "      url 'https://github.com/eng618/eng/releases/download/${TAG_NAME}/${LINUX_AMD64_FILE}'" >> eng.rb
          echo "      sha256 '${{ fromJson(steps.get_checksums.outputs.checksums)[env.LINUX_AMD64_FILE] }}'" >> eng.rb
          echo "    elsif Hardware::CPU.arm?" >> eng.rb
          echo "      url 'https://github.com/eng618/eng/releases/download/${TAG_NAME}/${LINUX_ARM64_FILE}'" >> eng.rb
          echo "      sha256 '${{ fromJson(steps.get_checksums.outputs.checksums)[env.LINUX_ARM64_FILE] }}'" >> eng.rb
          echo "    end" >> eng.rb
          echo "  end" >> eng.rb
          echo "  license 'MIT'" >> eng.rb
          echo "" >> eng.rb
          echo "  def install" >> eng.rb
          echo "    puts \"bin: #{bin}\"" >> eng.rb
          echo "    puts \"Installing eng to: #{bin}\"" >> eng.rb
          echo "    bin.install 'eng'" >> eng.rb
          echo "    puts \"eng installed successfully\"" >> eng.rb
          echo "    puts \"Permissions of eng: #{File.stat(\"#{bin}/eng\").mode.to_s(8)}\"" >> eng.rb
          echo "    # Verify the binary is functional before generating completions" >> eng.rb
          echo "    system \"#{bin}/eng\", '--help'" >> eng.rb
          echo "    generate_completions" >> eng.rb
          echo "  end" >> eng.rb
          echo "" >> eng.rb
          echo "  def generate_completions" >> eng.rb
          echo "    puts \"PATH: #{ENV['PATH']}\"" >> eng.rb
          echo "    puts \"Running: #{bin}/eng completion bash\"" >> eng.rb
          echo "    (bash_completion/'eng').write Utils.safe_popen_read(\"#{bin}/eng\", 'completion', 'bash')" >> eng.rb
          echo "    (zsh_completion/'_eng').write Utils.safe_popen_read(\"#{bin}/eng\", 'completion', 'zsh')" >> eng.rb
          echo "    (fish_completion/'eng.fish').write Utils.safe_popen_read(\"#{bin}/eng\", 'completion', 'fish')" >> eng.rb
          echo "  end" >> eng.rb
          echo "" >> eng.rb
          echo "  test do" >> eng.rb
          echo "    system \"#{bin}/eng\", '--help'" >> eng.rb
          echo "  end" >> eng.rb
          echo "end" >> eng.rb

          git config user.email "eng618@garciaericn.com"
          git config user.name "Eric N. Garcia"
          git add eng.rb
          # Commit message still uses the full tag name (with 'v')
          git commit -m "Update eng to ${TAG_NAME}"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/eng618/homebrew-eng.git
